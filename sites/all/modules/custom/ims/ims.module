<?php

/**
* Custom code for GSLIS IMS app
* @file
* Specifies rules for restricting student user registration based on email addr found in datatel student table
* If not a simmons.edu domain, assume supervisor.  Check domain in Org table.
*/
/**
* Implements hook_form_FORM_ID_alter().
**/
 function ims_form_user_register_form_alter(&$form, &$form_state) {
  global $user;

 //kpr($user, $return = FALSE, $name = NULL);

  $t_role = "administrator";

  // allow administrator to circumvent extra validation
  // if (!in_array($t_role, $user->roles)) {
    // this adds your custom validation function to the form validation array
    $form['#validate'][] = 'ims_user_register_validation';
  // }

  // additional submit function for adding profile2
  $form['#submit'][] = 'ims_user_submit';
  
 }

/**
 * Implements hook_node_view().

function ims_node_view($node, $view_mode, $langcode) {

 kpr($node, $return = FALSE, $name = NULL);

 for ($count = 0; $count < 2; $count++) {
  var_dump($count);
 }
}
*/

/**
 * Implements hook_user_presave().
 */
function ims_user_presave(&$edit, $account, $category) {
  // only assign role of student or supervisor on new accounts
  if (isset($account->is_new) && !empty($account->is_new)) {
    $user_roles = user_roles(TRUE);
    $roles_to_add = array();

    // Make sure the roles key exists.
    if (!isset($edit['roles'])) {
      $edit['roles'] = array();
    }

    $t_role = array_filter(variable_get('ims_assigned_role', array()));
    if (!empty($t_role)) {
      $roles_to_add = array_intersect($user_roles, $t_role); 

      // Add in the new roles to override the current roles.
      $edit['roles'] = $roles_to_add + $edit['roles'];
    }
  }
}

function ims_user_register_validation($form, &$form_state) {

  // look into making the literal a constant and have all constants in a .inc 
  $schoolDomains = 'simmons.edu';

  //clear out assigned role for next user
  variable_set('ims_assigned_role', array());

  // Get domain
  $email = $form_state['values']['mail'];
  $splitIndex = strpos($email, '@')+1;
  $emailLength = strlen($email);
  $domain = substr($email, $splitIndex, $emailLength);

  $entity_type = "node";

  if (($domain == $schoolDomains) ) {
    // we've got a Simmons student (Simmons supervisors need not register)
   
    $bundle = "student";
    $field_name = "field_st_email";
    $value = $email;
    
    if (tedbow_utils_find_entity_with_field_value($entity_type, $bundle, $field_name, $value, $column = 'value')) {
      //Create a profile2 record for them now?
      //set ims_assigned_role to student; used by ims_user_presave
      variable_set('ims_assigned_role', array('student'));
    }
    else {
       form_set_error('mail', t('Sorry but you don\'t appear to be registered for an internship course this semesters. Send email to imsadmin@simmons.edu if you have questions.'));
    }

  }
  else {
   // we've got a potential supervisor, check org table for domain match
   // is it doesn't match, then the user may not register
    $bundle = "org_profile";
    $field_name = "field_org_email";
    $value = $domain;
    
    // returns org id (nid of node of content type organization)
    $oid = tedbow_utils_find_entity_with_field_value($entity_type, $bundle, $field_name, $value, $column = 'value');
    if (!empty($oid)) {
      //set ims_assigned_role to supervisor; used by ims_user_presave
      variable_set('ims_assigned_role', array('supervisor', $oid));
    }
    else {
      form_set_error('mail', t('Sorry but we cannot register you with that email address. Send email to imsadmin@simmons.edu if you have questions.'));
    }
  }
}
/*
function ims_form_alter(&$form, &$form_state, $formID) {
  dpm($form, $formID);
}
*/

/**
 * additional submit function for adding a profile2 profile
 */
function ims_user_submit($form, &$form_state) {
  $t_role = array();
  $t_role = variable_get('ims_assigned_role', array());

  if (in_array('supervisor', $t_role)) {
    $uid = $form_state['values']['uid'];
    // create profile object
    $profile = profile_create(array('user' => $uid, 'type' => 'supervisor'));

    // populate profile fields
    $profile->field_sup_org[LANGUAGE_NONE][0]['target_id'] = $t_role[1]; //stored by variable_set in validation
    $profile->field_sup_email[LANGUAGE_NONE][0]['value'] = $form_state['values']['mail']; 

    // save profile
    profile2_save($profile);
  }
}
/**
 * implements hook_views_api().
 */
function ims_views_api() {
  return array('api' => '3.0');
}
/**
 * Implements hook_views_default_views().
 */
function ims_views_default_views() {
  $path = './' . drupal_get_path('module', 'ims') . '/views/*.inc';
  $views = array();
  foreach (glob($path) as $views_filename) {
    require_once($views_filename);
  }
  return $views;
}
/**
* @file
* change front page based on whether user is anonymous or authenticated

function ims_menu() {
   $items['front'] = array(
        'page callback' => 'ims_front',
    'access callback' => TRUE,
   );
   return $items;
 }

// The homepage. Serves node 93 to anon and node 94 to authenticated
function ims_front() {
        global $user;
        $nid = $user->uid == 0 ? 93 : 94;
        $node = node_load($nid);
  return node_view($node);
}
*/
