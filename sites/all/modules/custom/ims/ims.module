<?php

/*
 * Custom code for GSLIS IMS app
 */
function ims_evaluation_node_submit(&$form, &$form_state) {
  $student_profile = profile2_load($form_state['values']['field_eval_student']['und'][0]['target_id']);
  $form_state['values']['title'] .=  (string) $student_profile->field_stp_fname['und'][0]['value'] . ' ';
  $form_state['values']['title'] .=  (string) $student_profile->field_stp_lname['und'][0]['value'];

}
function ims_final_evaluation_node_submit(&$form, &$form_state) {
  $student_profile = profile2_load($form_state['values']['field_fin_student']['und'][0]['target_id']);
  $form_state['values']['title'] .=  (string) $student_profile->field_stp_fname['und'][0]['value'] . ' ';
  $form_state['values']['title'] .=  (string) $student_profile->field_stp_lname['und'][0]['value'];

}
/*
 * quick way to display formID; will be commented most of the time 

function ims_form_alter(&$form, &$form_state, $formID) {
  dpm($form);
  dpm($form_state);
}
 */
/**
* @file
* Build the drop-down list of students from the internship node
* Set the default supervisor name to the supervisor on the internship
* 
*/
/* Implements hook_form_FORM_ID_alter(). */
 function ims_form_evaluation_node_form_alter(&$form, &$form_state) {
  $t_nid = $form['field_eval_internship']['und']['#default_value'][0];
  $form['field_eval_student']['und']['#options'] = array();
  
  if ($t_nid) {
    $t_int_node = node_load($t_nid);
    if ($t_int_node) {
     // build the drop down for the students assigned to this internship
     foreach ($t_int_node->field_int_assignment['und'] as $t_assn) {
       if (!empty($t_assn['target_id'])) {
         $student_profile = profile2_load($t_assn['target_id']); 
         if (!empty($student_profile)) {
           $form['field_eval_student']['und']['#options'][$t_assn['target_id']] = $student_profile->field_stp_fname['und'][0]['value'] . " ";
           $form['field_eval_student']['und']['#options'][$t_assn['target_id']] .= $student_profile->field_stp_lname['und'][0]['value'];
         }
       }
       
     }
     // set the default title to pass validation; it will be amended in ims_evaluation_node_submit
     $form['title']['#default_value'] = 'MSE: '. $t_int_node->title . '--';
     // set default supervisor name
     $form['field_eval_supervisor_name']['und'][0]['value']['#default_value'] = $t_int_node->field_int_sup_name['und'][0]['value'];
    }
    // need an extra submit function to set the title
    $form['#submit'][] = 'ims_evaluation_node_submit';
  }
  else {
    watchdog('Mid-semester evaluation', 'Illegal internship node ID: %nid', $t_nid);
  }
  
 }
/**
* @file
* Build the drop-down list of students from the internship node
* Set the default supervisor name to the supervisor on the internship
* 
*/
/* Implements hook_form_FORM_ID_alter(). */
 function ims_form_final_evaluation_node_form_alter(&$form, &$form_state) {
  $t_nid = $form['field_fin_internship']['und']['#default_value'][0];
  $form['field_fin_student']['und']['#options'] = array();
  
  if ($t_nid) {
    $t_int_node = node_load($t_nid);
    if ($t_int_node) {
     // build the drop down for the students assigned to this internship
     foreach ($t_int_node->field_int_assignment['und'] as $t_assn) {
       if (!empty($t_assn['target_id'])) {
         $student_profile = profile2_load($t_assn['target_id']); 
         if (!empty($student_profile)) {
           $form['field_fin_student']['und']['#options'][$t_assn['target_id']] = $student_profile->field_stp_fname['und'][0]['value'] . " ";
           $form['field_fin_student']['und']['#options'][$t_assn['target_id']] .= $student_profile->field_stp_lname['und'][0]['value'];
         }
       }
       
     }
     // set the default title to pass validation; it will be amended in ims_evaluation_node_submit
     $form['title']['#default_value'] = 'FE: '. $t_int_node->title . '--';
     // set default supervisor name (shares field name with Evaluation content type)
     $form['field_eval_supervisor_name']['und'][0]['value']['#default_value'] = $t_int_node->field_int_sup_name['und'][0]['value'];
    }
    // need an extra submit function to set the title
    $form['#submit'][] = 'ims_final_evaluation_node_submit';
  }
  else {
    watchdog('Final evaluation', 'Illegal internship node ID: %nid', $t_nid);
  }
  
 }
/**
* @file
* If logged in user is a student, then set defaults to some fields in the choice node.
* Set the title and set the semester to the active semester
*/
/* Implements hook_form_FORM_ID_alter(). */
 function ims_form_internship_choice_node_form_alter(&$form, &$form_state) {
  global $user;

  $t_role = "student";
  $form['#validate'][] = 'ims_internship_choice_validation';
  $form['#submit'][] = 'ims_internship_choice_node_submit';
  
  // only set default values for students and when she is creating a new choice (nid not set)
  if (in_array($t_role, $user->roles) && $form['nid']['#value'] == NULL) {
    // get the student profile
    $profile_values = profile2_load_by_user($user->uid);
    
    if (!empty($profile_values)) {
      // get the active semester
      //get vocabulary ID for "Semesters" vocabulary
      // we only want the active semester
      $vid = taxonomy_vocabulary_machine_name_load("semesters")->vid;

      //get all the terms in the vocabulary. there should only be a few
      $terms = taxonomy_get_tree($vid, $parent = 0, $max_depth = NULL, $load_entities = TRUE);
      
      foreach ($terms as $term) {
        // find the active semester
        if ($term->field_tax_sem_active['und'][0]['value'] == '1') {
          $form['field_ch_semester']['und']['#default_value'] = array($term->tid);
          break;
        }
      }
      $t_node = $form['#node'];
      $t_node_id = $t_node->field_ch_internship['und'][0]['target_id'];
      $int_node = node_load($t_node_id);

      $std_profile = $profile_values['student_profile'];
      
      $dTitle = (string) $int_node->title;
      $dTitle .= '-';
      $dTitle .= (string) $std_profile->field_stp_fname['und'][0]['value'];
      $dTitle .= ' ';
      $dTitle .= (string) $std_profile->field_stp_lname['und'][0]['value'];
      $dTitle .= ' (';
      $dTitle .= (string) $user->name;
      $dTitle .= ')';
      
      $form['title']['#default_value'] = $dTitle;         
      $form['field_ch_student']['und']['#default_value'] = array($std_profile->pid);
    }
  }
}
/**
* @file
* If logged in user is a supervisor, then set defaults to some fields in the internship node.
* Also if supervisor, set the semester to the active semester
*/
/* Implements hook_form_FORM_ID_alter(). */
 function ims_form_internship_node_form_alter(&$form, &$form_state) {
  global $user;

  $t_role = "supervisor";

  // only set default values for supervisors and when she is creating a new internship (nid not set)
  if (in_array($t_role, $user->roles) && $form['nid']['#value'] == NULL) {
    // get the supervisor profile
    $profile_values = profile2_load_by_user($user->uid);
    
    if (!empty($profile_values)) {
      // get the active semester
      //get vocabulary ID for "Semesters" vocabulary
      // we only want the active semester
      $vid = taxonomy_vocabulary_machine_name_load("semesters")->vid;

      //get all the terms in the vocabulary. there should only be a few
      $terms = taxonomy_get_tree($vid, $parent = 0, $max_depth = NULL, $load_entities = TRUE);
      
      foreach ($terms as $term) {
        // find the active semester
        if ($term->field_tax_sem_active['und'][0]['value'] == '1') {
          $form['field_int_semester']['und']['#default_value'] = array($term->tid);
          break;
        }
      }
      $super_profile = $profile_values['supervisor'];
      
      $form['field_int_org_id']['und']['#default_value'] = array($super_profile->field_sup_org['und'][0]['target_id']);     
      $form['field_int_sup_name']['und'][0]['value']['#default_value'] = $super_profile->field_sup_name['und'][0]['value'];
      $form['field_int_sup_phone']['und'][0]['value']['#default_value'] = $super_profile->field_sup_phone['und'][0]['value'];
      $form['field_int_sup_email']['und'][0]['value']['#default_value'] = $super_profile->field_sup_email['und'][0]['value'];
      //dpm($form);
    }
  }
  else {
    // build the student profile list for the assignment drop-down
    $form['field_int_assignment']['und']['#options'] = array();
    $form['field_int_assignment']['und']['#options']['_none'] = "- None -";
    
    $value = $form['field_int_course']['und']['#default_value'][0];
    
    if ($value != NULL) {
      //the internship has a course so find only those students who are registered for the course
      $entity_type = "profile2";
      $bundle = "student_profile";
      $field_name = "field_stp_course";
      $column = 'tid';
      $pids = tedbow_utils_find_entities_with_field_value($entity_type, $bundle, $field_name, $value, $column);
       
      // $results should be a list of pids for students taking the course for which this internship is assigned
      foreach ($pids as $pid) {
        $student_profile = profile2_load($result);
        
        if ((empty($student_profile->field_stp_assignment)) || 
            ($student_profile->field_stp_assignment['und'][0]['target_id'] == $form['nid']['#value'])) {       
          $form['field_int_assignment']['und']['#options'][$pid] = $student_profile->field_stp_fname['und'][0]['value'] . " ";
          $form['field_int_assignment']['und']['#options'][$$pid] .= $student_profile->field_stp_lname['und'][0]['value'];
        }  
      }  
    }
    // this adds your custom validation function to the form validation array
    $form['#validate'][] = 'ims_internship_node_validation';

    // additional submit function for adding profile2
    $form['#submit'][] = 'ims_internship_node_submit';
  }
}
/**
* @file
* Specifies rules for restricting student user registration based on email addr found in datatel student table
* If not a simmons.edu domain, assume supervisor.  Check domain in Org table.
*/
/**
* Implements hook_form_FORM_ID_alter().
**/
 function ims_form_user_register_form_alter(&$form, &$form_state) {
  global $user;

  $t_role = "administrator";

  // allow administrator to circumvent extra validation
  if (!in_array($t_role, $user->roles)) {
    // this adds your custom validation function to the form validation array
    $form['#validate'][] = 'ims_user_register_validation';
    // additional submit function for adding profile2
    $form['#submit'][] = 'ims_user_submit';
  } 
 }
 function ims_internship_choice_node_submit(&$form, &$form_state) { 
  // load internship node, increment chosen and save it
  // need to test for new choice, deleted choice (decrement chosen) or changed choice (inc and dec)
  $t_internship_id = $form_state['values']['field_ch_internship']['und'][0]['target_id'];
  
  if ($form['nid']['#value'] == NULL) {
    //new choice. get chosen and increment   
    $t_int_node = node_load($t_internship_id);
    if (isset($t_int_node)) {
      $t_chosen = $t_int_node->field_int_chosen['und'][0]['value'];
      $t_chosen++;
      $t_int_node->field_int_chosen['und'][0]['value'] = $t_chosen;
      
      node_save($t_int_node);
    }
  }
 
  // execute the Student Choices view. it will return all of the choices a student has made so far
  // the view uses the logged in user's uid as context
  $view_name = "student_choices";
  $display_id = "block";  
  $results = views_get_view_result($view_name, $display_id);
  //grab the rank the student just entered
  $t_rank = $form_state['values']['field_ch_rank']['und'][0]['value'];
  foreach ($results as $result) {
    // if the student is changing the current rank to a rank she has chosen before but for a different internship
    // then give that internship the old rank from this internship
    if (($t_internship_id != $result->node_field_data_field_ch_internship_nid) && 
       ($t_rank == $result->field_field_ch_rank[0]['raw']['value'])) {
        $t_ch_nid = $result->field_ch_student_profile_nid;
        $t_ch_node = node_load($t_ch_nid); // load the choice node
        $arg0 = $form_state['build_info']['args'][0];
        $t_ch_node->field_ch_rank['und'][0]['value'] = $arg0->field_ch_rank['und'][0]['value'];
        node_save($t_ch_node);
    }
  }
 }
 function ims_internship_choice_validation(&$form, &$form_state) { 
  //grab the rank the student had just entered
  $t_rank = $form_state['values']['field_ch_rank']['und'][0]['value'];
  //grab the nid of the internship the student is attempting to choose
  $t_internship_id = $form_state['values']['field_ch_internship']['und'][0]['target_id'];
  
  // execute the Student Choices view. it will return all of the choices a student has made so far
  // the view uses the logged in user's uid as context
  $view_name = "student_choices";
  $display_id = "block";
  $results = views_get_view_result($view_name, $display_id);
  
  // we have one set of validations for adding new choices and another for editing existing choices
  if ($form['nid']['#value'] == NULL) {
    //check to see how many choices this student has already made
    if (count($results) > 2){
     form_set_error('student choice', t('You have already have made three choices.'));
    }
  
    // if the student has choices already, make sure she doesn't use the same rank again
    // or she doesn't pick the same internship twice
    if (count($results) > 0) {
      foreach ($results as $result){
        if ($t_rank == $result->field_field_ch_rank[0]['raw']['value']) {
          form_set_error('student choice', t('You already have a choice of rank ' . $t_rank . '.'));
          break;
        } 
        if ($t_internship_id == $result->node_field_data_field_ch_internship_nid) {
          form_set_error('student choice', t('You already have chosen this internship.'));
          break;
        }
      }
    }
  }
 
 }
 function ims_internship_node_submit(&$form, &$form_state) {
   //unassign previously assigned students and then assign new ones
   //$t_pre holds the list of students previously assigned; it may be empty
   $t_args0 = $form_state['build_info']['args'][0];
   $t_pre = $t_args0->field_int_assignment['und'];
   
   //$t_new holds the list of newly assigned students; it may be empty
   $t_new = $form_state['values']['field_int_assignment']['und'];
   
   if (!(empty($t_pre))) {
     ims_unassign_students($t_pre);
   }
    
    $t_assn = array();
    //assign new students
    foreach ($t_new as $t_assn) {
      $t_pid = (int) $t_assn['target_id'];
      
      if ($t_pid > 0) {
        $student_profile = profile2_load($t_pid);
        //make sure we have a valid student profile object
        if (!(empty($student_profile))) {
          $student_profile->field_stp_assignment['und'][0]['target_id'] = $form_state['values']['nid'];
          profile2_save($student_profile);
        }
      }     
    }
 }
 function ims_internship_node_validation(&$form, &$form_state) {
  $t_count = count($form_state['values']['field_int_assignment']['und']);
  if ($t_count > (int) $form_state['values']['field_int_positions']['und'][0]['value']) {
    form_set_error('mail', t('The number of students assigned may not exceed the number of positions available.'));
  }
 }
/**
* @file
* Extra deletion logic after deleting a node.
*/
/* Implements hook_node_delete(). */
 function ims_node_delete($node) {
  
  switch ($node->type) {
    case ('internship_choice'):
      //we're deleting an internship choice, so we've got to load the internship and decrement chosen
     $t_internship_id = $node->field_ch_internship['und'][0]['target_id'];
      $t_int_node = node_load($t_internship_id);
      //do we have a valid node?
      if (isset($t_int_node)) {
        $t_chosen = $t_int_node->field_int_chosen['und'][0]['value'];
        if ($t_chosen > 0) {
           $t_chosen--;
           $t_int_node->field_int_chosen['und'][0]['value'] = $t_chosen;
      
           node_save($t_int_node);
        }
      }
      break;
    case ('internship'):
      //we're deleting an internship. unassign all students assigned to this internship
      $t_assignments = $node->field_int_assignment['und'];
      
      if (!(empty($t_assignments))) {
        ims_unassign_students($t_assignments);
      }
      
      break;
    default:
      break;
  }
 }
/**
* @file
* unassign previously assigned students
*/
 function ims_unassign_students($assignments) {
   foreach ($assignments as $t_assn) {
     $t_pid = (int) $t_assn['target_id'];
      
     if ($t_pid > 0) {
       $student_profile = profile2_load($t_pid);
       //make sure we have a valid student profile object
       if (!(empty($student_profile))) {
          $student_profile->field_stp_assignment = array();
          profile2_save($student_profile);
       }
     }
   }
 }
/**
 * Implements hook_user_presave().
 */
function ims_user_presave(&$edit, $account, $category) {
  // only assign role of student or supervisor on new accounts
  if (isset($account->is_new) && !empty($account->is_new)) {
    $user_roles = user_roles(TRUE);
    $roles_to_add = array();

    // Make sure the roles key exists.
    if (!isset($edit['roles'])) {
      $edit['roles'] = array();
    }

    $t_role = array_filter(variable_get('ims_assigned_role', array()));
    if (!empty($t_role)) {
      $roles_to_add = array_intersect($user_roles, $t_role); 

      // Add in the new roles to override the current roles.
      $edit['roles'] = $roles_to_add + $edit['roles'];
    }
  }
}

function ims_user_register_validation(&$form, &$form_state) {

  // look into making the literal a constant and have all constants in a .inc 
  $schoolDomains = 'simmons.edu';

  //clear out assigned role for next user
  variable_set('ims_assigned_role', array());

  // Get domain
  $email = $form_state['values']['mail'];
  $splitIndex = strpos($email, '@')+1;
  $emailLength = strlen($email);
  $domain = substr($email, $splitIndex, $emailLength);

  $entity_type = "node";

  if (($domain == $schoolDomains) ) {
    // we've got a Simmons student (Simmons supervisors need not register)
   
    $bundle = "student";
    $field_name = "field_st_email";
    $value = $email;
    
    if (tedbow_utils_find_entity_with_field_value($entity_type, $bundle, $field_name, $value, $column = 'value')) {
      //Create a profile2 record for them now?
      //set ims_assigned_role to student; used by ims_user_presave
      variable_set('ims_assigned_role', array('student'));
    }
    else {
       form_set_error('mail', t('Sorry but you don\'t appear to be registered for an internship course this semester. Send email to imsadmin@simmons.edu if you have questions.'));
    }

  }
  else {
   // we've got a potential supervisor, check org table for domain match
   // is it doesn't match, then the user may not register
    $bundle = "organization";
    $field_name = "field_org_email";
    $value = $domain;
    
    // returns org id (nid of node of content type organization)
    $oid = tedbow_utils_find_entity_with_field_value($entity_type, $bundle, $field_name, $value, $column = 'value');
    if (!empty($oid)) {
      //set ims_assigned_role to supervisor; used by ims_user_presave
      variable_set('ims_assigned_role', array('supervisor', $oid));
    }
    else {
      form_set_error('mail', t('Sorry but we cannot register you with that email address. Send email to imsadmin@simmons.edu if you have questions.'));
    }
  }
}
/**
 * additional submit function for adding a profile2 profile
 */
function ims_user_submit($form, &$form_state) {
  $t_role = array();
  $t_role = variable_get('ims_assigned_role', array());

  if (in_array('supervisor', $t_role)) {
    $uid = $form_state['values']['uid'];
    // create profile object
    $profile = profile_create(array('user' => $uid, 'type' => 'supervisor'));

    // populate profile fields
    $profile->field_sup_org[LANGUAGE_NONE][0]['target_id'] = $t_role[1]; //stored by variable_set in validation
    $profile->field_sup_email[LANGUAGE_NONE][0]['value'] = $form_state['values']['mail']; 

    // save profile
    profile2_save($profile);
  }
}
/**
 * implements hook_views_api().
 */
function ims_views_api() {
  return array('api' => '3.0');
}
/**
 * Implements hook_views_default_views().
 */
function ims_views_default_views() {
  $path = './' . drupal_get_path('module', 'ims') . '/views/*.inc';
  $views = array();
  foreach (glob($path) as $views_filename) {
    require_once($views_filename);
  }
  return $views;
}
/**
 * Implements hook_views_query_alter().
 */
function ims_views_query_alter(&$view, &$query) {

  global $user;

  //dpm($view);
  //dpm($query);
 
  switch ($view->name) {
   case 'internships':
     $t_role = "student";

     // only alter the query for students
     if (in_array($t_role, $user->roles)) {
      // get the student profile
      $profile_values = profile2_load_by_user($user->uid);
    
      if (!empty($profile_values)) {  
        $student_profile = $profile_values['student_profile'];
        // set the course condition in the view to the course in which the student is enrolled
        $query->where[1]['conditions'][2]['value'][0] = $student_profile->field_stp_course['und'][0]['tid'];     
      }
     }
     break;
   default:
     break;
  } 
}
